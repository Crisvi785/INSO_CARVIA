package com.carvia.models.dao;

import com.carvia.controllers.*;
import com.carvia.models.vo.PaymentVo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class PaymentDao {

    private final Connection connection;
    private static final Logger logger = LogManager.getLogger(PaymentDao.class);

    public PaymentDao() {
        this.connection = BBDDController.getInstance().getConnection();
    }

    public boolean insertPayment(PaymentVo payment) {
        String query = "INSERT INTO Payments (type, amount) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, payment.getType());
            statement.setDouble(2, payment.getAmount());
            logger.info("Pagado con " + payment.getType() + " unca cantidad de: " + payment.getAmount());
            return statement.executeUpdate() > 0;
        } catch (SQLException e) {
            logger.error("Error registrindo el pago de tipo " + payment.getType());
            e.printStackTrace();
            return false;
        }
    }

    /* 
    public PaymentVo getPaymentById(int idPay) {
        String query = "SELECT * FROM Payments WHERE idPay = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, idPay);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                String type = resultSet.getString("type");
                double amount = resultSet.getDouble("amount");
                logger.info("Payment with ID " + idPay + " found");
                return new PaymentVo(idPay, type, amount);
            }
        } catch (SQLException e) {
            logger.error("Error getting payment with ID " + idPay);
            e.printStackTrace();
        }
        return null;
    }

    public boolean updatePayment(PaymentVo payment) {
        String query = "UPDATE Payments SET type = ?, amount = ? WHERE idPay = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, payment.getType());
            statement.setDouble(2, payment.getAmount());
            statement.setInt(3, payment.getIdPay());
            logger.info("Payment with ID " + payment.getIdPay() + " updated");
            return statement.executeUpdate() > 0;
        } catch (SQLException e) {
            logger.error("Error updating payment with ID " + payment.getIdPay());
            e.printStackTrace();
            return false;
        }
    }

    public boolean deletePayment(int idPay) {
        String query = "DELETE FROM Payments WHERE idPay = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, idPay);
            logger.info("Payment with ID " + idPay + " deleted");
            return statement.executeUpdate() > 0;
        } catch (SQLException e) {
            logger.error("Error deleting payment with ID " + idPay);
            e.printStackTrace();
            return false;
        }
    }
    */
}
